Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

 

Example 1:

Input: s = "the sky is blue"
Output: "blue is sky the"
Example 2:

Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.
Example 3:

Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.


/*Start form here */

void rev_str(char *s,int st,int ed)
{
    while(st < ed)
    {
        char temp = s[st];
        s[st] = s[ed];
        s[ed] = temp;
        st++;
        ed--;
    }
}
char* reverseWords(char* s) 
{
    int len = strlen(s);

    rev_str(s,0,len - 1);

    int wordstart = 0;
    int wordend = 0;
    int resultind = 0;
    int i;

    for(int i = 0; i< len ; i++)
    {
        if(s[i] != ' ')
        {
            wordstart = i;

            while(s[i] != ' ' && s[i] != '\0')
            {
                i++;
            }
            wordend = i - 1;

            rev_str(s,wordstart,wordend);

            while(wordstart <= wordend)
            {
                s[resultind++] = s[wordstart++];
            }

            //if it is not a last word add a space
            if(s[i] != '\0')
            {
                s[resultind++] = ' ';
            }
        }
    }
        s[resultind] = '\0';

        int start = 0;
        while(s[i] == ' ')
        {
            start++;
        }
        strcpy(s,&s[start]);

        len = strlen(s);
        while(len > 0 && s[len - 1] == ' ')
        {
            s[len - 1] = '\0';
            len--;
        }
        return s;

    

}
